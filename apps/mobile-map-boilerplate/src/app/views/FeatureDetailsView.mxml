<?xml version="1.0" encoding="utf-8"?>
<!--
///////////////////////////////////////////////////////////////////////////
// Copyright (c) 2008-2013 Esri. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
///////////////////////////////////////////////////////////////////////////
-->
<esrimobile:View xmlns:fx="http://ns.adobe.com/mxml/2009"
                 xmlns:s="library://ns.adobe.com/flex/spark"
                 xmlns:esrimobile="com.esri.mobile.components.*"
                 xmlns:supportClasses="com.esri.mobile.components.supportClasses.*"
                 viewActivate="viewActivateHandler(event)">

    <fx:Script>
        <![CDATA[
            import com.esri.ags.Graphic;
            import com.esri.ags.Map;
            import com.esri.ags.esri_internal;
            import com.esri.ags.geometry.Extent;
            import com.esri.ags.geometry.Geometry;
            import com.esri.ags.geometry.MapPoint;
            import com.esri.ags.geometry.Multipoint;
            import com.esri.mobile.managers.supportClasses.InfoWindowData;
            
            import spark.events.ViewNavigatorEvent;

            use namespace esri_internal;

            protected function viewActivateHandler(event:ViewNavigatorEvent):void
            {
                list.dataProvider = data.dataProvider;
                list.selectedItem = data.selectedItem;
            }
            
            protected function pageChangedHandler(event:Event):void
            {
                var infoWindowData:InfoWindowData = list.visibleItem as InfoWindowData;
                if (infoWindowData)
                {
                    this.title = infoWindowData.getAttribute(infoWindowData.labelField);
                    setStyle("icon", infoWindowData.icon);
                }
            }
            
            /**
             * Code from the PopUpRendererSkin
             */
            private function zoomToHandler(event:MouseEvent):void
            {
                showMainView();
                
                var visibleData:InfoWindowData = list.dataProvider.getItemAt(list.pageNumber -1) as InfoWindowData;
                
                var graphic:Graphic = visibleData.graphic;
                var map:Map = applicationContext.map;
                var geometry:Geometry = graphic.geometry;
                
                var extent:Extent = geometry.extent; // returns null for MapPoint or Multipoint's with only one point
                if (extent)
                {
                    map.zoomTo(geometry);
                }
                else
                {
                    var mapPoint:MapPoint;
                    if (geometry is MapPoint)
                    {
                        mapPoint = geometry as MapPoint;
                    }
                    else if (geometry is Multipoint)
                    {
                        var multipoint:Multipoint = geometry as Multipoint;
                        if (multipoint.points && multipoint.points.length > 0)
                        {
                            mapPoint = multipoint.points[0];
                        }
                    }
                    if (mapPoint)
                    {
                        // make sure the infoWindow always points to the current (selected) feature
                        map.infoWindow.show(mapPoint);
                        // Zoom to 1/16th the size of the current extent.
                        // This is the same as calling map.zoomIn() four times.
                        map.zoom(1 / 16, mapPoint);
                        if (!map.extent.contains(mapPoint))
                        {
                            map.centerAt(mapPoint);
                        }
                    }
                }
            }
            
            private function editHandler(event:MouseEvent):void
            {   
                var visibleData:InfoWindowData = list.dataProvider.getItemAt(list.pageNumber -1) as InfoWindowData;  
                pushView(EditFeatureView, visibleData);
            }
            
        ]]>
    </fx:Script>

    <esrimobile:HorizontalPagingList id="list"
                                     width="100%" height="100%"
                                     pageChanged="pageChangedHandler(event)"
                                     indicatorPosition="top"
                                     itemRenderer="app.views.supportClasses.ItemRendererAttributeInspector"/>


    <esrimobile:menuItems>
        <supportClasses:MenuItem id="zoomTo" label="Zoom To" click="zoomToHandler(event)"/>
        <supportClasses:MenuItem id="edit" label="Edit" click="editHandler(event)"/>
    </esrimobile:menuItems>

    <!--<s:HGroup verticalAlign="middle">
         <s:Button id="deleteButton"
                   buttonMode="true"
                   enabled.disabled="false"
                   label="{hostComponent.deleteButtonLabel}"
                   skinClass="com.esri.ags.skins.AttributeInspectorDeleteButtonSkin"/>
         <s:Button id="okButton"
                   enabled.disabled="false"
                   label="{hostComponent.okButtonLabel}"/>
     </s:HGroup>-->

</esrimobile:View>
